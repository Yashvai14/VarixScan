"use client";

import { useState, useRef, useEffect } from "react";
import { 
  MessageCircle, 
  Send, 
  Mic, 
  Volume2,
  Languages,
  Bot,
  User,
  Globe,
  Stethoscope,
  Clock,
  Heart,
  HelpCircle
} from "lucide-react";

interface Message {
  id: string;
  text: string;
  sender: "user" | "assistant";
  timestamp: Date;
  language: string;
}

interface Language {
  code: string;
  name: string;
  flag: string;
}

const languages: Language[] = [
  { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  { code: "hi", name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "mr", name: "рдорд░рд╛рдареА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "es", name: "Espa├▒ol", flag: "ЁЯЗкЁЯЗ╕" },
  { code: "fr", name: "Fran├зais", flag: "ЁЯЗлЁЯЗ╖" },
  { code: "de", name: "Deutsch", flag: "ЁЯЗйЁЯЗк" }
];

const quickQuestions = {
  en: [
    "What are varicose veins?",
    "What causes varicose veins?",
    "How can I prevent varicose veins?",
    "When should I see a doctor?",
    "What treatment options are available?"
  ],
  hi: [
    "рд╡реЗрд░рд┐рдХреЛрд╕ рд╡реЗрдиреНрд╕ рдХреНрдпрд╛ рд╣реИрдВ?",
    "рд╡реЗрд░рд┐рдХреЛрд╕ рд╡реЗрдиреНрд╕ рдХреЗ рдХрд╛рд░рдг рдХреНрдпрд╛ рд╣реИрдВ?",
    "рдореИрдВ рд╡реЗрд░рд┐рдХреЛрд╕ рд╡реЗрдиреНрд╕ рдХреЛ рдХреИрд╕реЗ рд░реЛрдХ рд╕рдХрддрд╛ рд╣реВрдБ?",
    "рдореБрдЭреЗ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдХрдм рдорд┐рд▓рдирд╛ рдЪрд╛рд╣рд┐рдП?",
    "рдХреМрди рд╕реЗ рдЙрдкрдЪрд╛рд░ рд╡рд┐рдХрд▓реНрдк рдЙрдкрд▓рдмреНрдз рд╣реИрдВ?"
  ],
  mr: [
    "рд╡реНрд╣реЕрд░рд┐рдХреЛрдЬ рд╡реНрд╣реЗрдиреНрд╕ рдореНрд╣рдгрдЬреЗ рдХрд╛рдп?",
    "рд╡реНрд╣реЕрд░рд┐рдХреЛрдЬ рд╡реНрд╣реЗрдиреНрд╕рдЪреА рдХрд╛рд░рдгреЗ рдХрд╛рдп рдЖрд╣реЗрдд?",
    "рдореА рд╡реНрд╣реЕрд░рд┐рдХреЛрдЬ рд╡реНрд╣реЗрдиреНрд╕ рдХрд╕реЗ рдЯрд╛рд│реВ рд╢рдХрддреЛ?",
    "рдореА рдбреЙрдХреНрдЯрд░рд╛рдВрдирд╛ рдХрдзреА рднреЗрдЯрд╛рд╡реЗ?",
    "рдХреЛрдгрддреЗ рдЙрдкрдЪрд╛рд░ рдкрд░реНрдпрд╛рдп рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗрдд?"
  ]
};

const responses = {
  en: {
    "What are varicose veins?": "Varicose veins are enlarged, twisted veins that usually appear on the legs and feet. They occur when blood pools in the veins due to weakened or damaged valves.",
    "What causes varicose veins?": "Common causes include genetics, pregnancy, prolonged standing, obesity, age, and hormonal changes. Risk factors can vary by individual.",
    "How can I prevent varicose veins?": "Prevention methods include regular exercise, maintaining healthy weight, elevating legs when resting, avoiding prolonged sitting/standing, and wearing compression stockings.",
    "When should I see a doctor?": "Consult a doctor if you experience pain, swelling, skin changes, or if veins become increasingly visible and bothersome.",
    "What treatment options are available?": "Treatments range from lifestyle changes and compression stockings to medical procedures like sclerotherapy, laser therapy, and surgical interventions."
  },
  hi: {
    "рд╡реЗрд░рд┐рдХреЛрд╕ рд╡реЗрдиреНрд╕ рдХреНрдпрд╛ рд╣реИрдВ?": "рд╡реЗрд░рд┐рдХреЛрд╕ рд╡реЗрдиреНрд╕ рдмрдбрд╝реА рдФрд░ рдореБрдбрд╝реА рд╣реБрдИ рдирд╕реЗрдВ рд╣реИрдВ рдЬреЛ рдЖрдорддреМрд░ рдкрд░ рдкреИрд░реЛрдВ рдФрд░ рдкреИрд░реЛрдВ рдкрд░ рджрд┐рдЦрд╛рдИ рджреЗрддреА рд╣реИрдВред рдпреЗ рддрдм рд╣реЛрддреА рд╣реИрдВ рдЬрдм рдХрдордЬреЛрд░ рдпрд╛ рдХреНрд╖рддрд┐рдЧреНрд░рд╕реНрдд рд╡рд╛рд▓реНрд╡реЛрдВ рдХреЗ рдХрд╛рд░рдг рдирд╕реЛрдВ рдореЗрдВ рдЦреВрди рдЗрдХрдЯреНрдард╛ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред",
    "рд╡реЗрд░рд┐рдХреЛрд╕ рд╡реЗрдиреНрд╕ рдХреЗ рдХрд╛рд░рдг рдХреНрдпрд╛ рд╣реИрдВ?": "рд╕рд╛рдорд╛рдиреНрдп рдХрд╛рд░рдгреЛрдВ рдореЗрдВ рдЖрдиреБрд╡рдВрд╢рд┐рдХрддрд╛, рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛, рд▓рдВрдмреЗ рд╕рдордп рддрдХ рдЦрдбрд╝реЗ рд░рд╣рдирд╛, рдореЛрдЯрд╛рдкрд╛, рдЙрдореНрд░ рдФрд░ рд╣рд╛рд░реНрдореЛрдирд▓ рдмрджрд▓рд╛рд╡ рд╢рд╛рдорд┐рд▓ рд╣реИрдВред",
    "рдореИрдВ рд╡реЗрд░рд┐рдХреЛрд╕ рд╡реЗрдиреНрд╕ рдХреЛ рдХреИрд╕реЗ рд░реЛрдХ рд╕рдХрддрд╛ рд╣реВрдБ?": "рдмрдЪрд╛рд╡ рдХреЗ рддрд░реАрдХреЛрдВ рдореЗрдВ рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо, рд╕реНрд╡рд╕реНрде рд╡рдЬрди рдмрдирд╛рдП рд░рдЦрдирд╛, рдЖрд░рд╛рдо рдХрд░рддреЗ рд╕рдордп рдкреИрд░ рдКрдВрдЪреЗ рдХрд░рдирд╛, рд▓рдВрдмреЗ рд╕рдордп рддрдХ рдмреИрдардиреЗ/рдЦрдбрд╝реЗ рд░рд╣рдиреЗ рд╕реЗ рдмрдЪрдирд╛ рд╢рд╛рдорд┐рд▓ рд╣реИред",
    "рдореБрдЭреЗ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдХрдм рдорд┐рд▓рдирд╛ рдЪрд╛рд╣рд┐рдП?": "рдпрджрд┐ рдЖрдк рджрд░реНрдж, рд╕реВрдЬрди, рддреНрд╡рдЪрд╛ рдореЗрдВ рдмрджрд▓рд╛рд╡ рдХрд╛ рдЕрдиреБрднрд╡ рдХрд░рддреЗ рд╣реИрдВ рдпрд╛ рдирд╕реЗрдВ рдЕрдзрд┐рдХ рджрд┐рдЦрд╛рдИ рджреЗрдиреЗ рд▓рдЧрддреА рд╣реИрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
    "рдХреМрди рд╕реЗ рдЙрдкрдЪрд╛рд░ рд╡рд┐рдХрд▓реНрдк рдЙрдкрд▓рдмреНрдз рд╣реИрдВ?": "рдЙрдкрдЪрд╛рд░реЛрдВ рдореЗрдВ рдЬреАрд╡рдирд╢реИрд▓реА рдореЗрдВ рдмрджрд▓рд╛рд╡ рд╕реЗ рд▓реЗрдХрд░ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛рдПрдВ рдЬреИрд╕реЗ рд╕реНрдХреНрд▓реЗрд░реЛрдереЗрд░реЗрдкреА, рд▓реЗрдЬрд░ рдереЗрд░реЗрдкреА рдФрд░ рд╕рд░реНрдЬрд┐рдХрд▓ рд╣рд╕реНрддрдХреНрд╖реЗрдк рд╢рд╛рдорд┐рд▓ рд╣реИрдВред"
  },
  mr: {
    "рд╡реНрд╣реЕрд░рд┐рдХреЛрдЬ рд╡реНрд╣реЗрдиреНрд╕ рдореНрд╣рдгрдЬреЗ рдХрд╛рдп?": "рд╡реНрд╣реЕрд░рд┐рдХреЛрдЬ рд╡реНрд╣реЗрдиреНрд╕ рдореНрд╣рдгрдЬреЗ рдореЛрдареНрдпрд╛, рд╡рд│рд▓реЗрд▓реНрдпрд╛ рд░рдХреНрддрд╡рд╛рд╣рд┐рдиреНрдпрд╛ рдЖрд╣реЗрдд рдЬреНрдпрд╛ рд╕рд╛рдорд╛рдиреНрдпрддрдГ рдкрд╛рдпрд╛рдВрд╡рд░ рджрд┐рд╕рддрд╛рдд. рдХрдордХреБрд╡рдд рдХрд┐рдВрд╡рд╛ рдЦрд░рд╛рдм рдЭрд╛рд▓реЗрд▓реНрдпрд╛ рд╡рд╛рд▓реНрд╡рдореБрд│реЗ рд░рдХреНрддрд╡рд╛рд╣рд┐рдиреНрдпрд╛рдВрдордзреНрдпреЗ рд░рдХреНрдд рд╕рд╛рдЪрддреЗ рддреЗрд╡реНрд╣рд╛ рд╣реЗ рд╣реЛрддреЗ.",
    "рд╡реНрд╣реЕрд░рд┐рдХреЛрдЬ рд╡реНрд╣реЗрдиреНрд╕рдЪреА рдХрд╛рд░рдгреЗ рдХрд╛рдп рдЖрд╣реЗрдд?": "рд╕рд╛рдорд╛рдиреНрдп рдХрд╛рд░рдгрд╛рдВрдордзреНрдпреЗ рдЖрдиреБрд╡рдВрд╢рд┐рдХрддрд╛, рдЧрд░реНрднрдзрд╛рд░рдгрд╛, рджреАрд░реНрдШрдХрд╛рд│ рдЙрднреЗ рд░рд╛рд╣рдгреЗ, рд▓рдареНрдардкрдгрд╛, рд╡рдп рдЖрдгрд┐ рд╣рд╛рд░реНрдореЛрдирд▓ рдмрджрд▓ рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдЖрд╣реЗрдд.",
    "рдореА рд╡реНрд╣реЕрд░рд┐рдХреЛрдЬ рд╡реНрд╣реЗрдиреНрд╕ рдХрд╕реЗ рдЯрд╛рд│реВ рд╢рдХрддреЛ?": "рдкреНрд░рддрд┐рдмрдВрдзрдХ рдкрджреНрдзрддреАрдВрдордзреНрдпреЗ рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо, рдирд┐рд░реЛрдЧреА рд╡рдЬрди рд░рд╛рдЦрдгреЗ, рд╡рд┐рд╢реНрд░рд╛рдВрддреАрдЪреНрдпрд╛ рд╡реЗрд│реА рдкрд╛рдп рдЙрдВрдЪ рдХрд░рдгреЗ рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдЖрд╣реЗ.",
    "рдореА рдбреЙрдХреНрдЯрд░рд╛рдВрдирд╛ рдХрдзреА рднреЗрдЯрд╛рд╡реЗ?": "рдЬрд░ рддреБрдореНрд╣рд╛рд▓рд╛ рд╡реЗрджрдирд╛, рд╕реВрдЬ, рддреНрд╡рдЪреЗрддреАрд▓ рдмрджрд▓ рдХрд┐рдВрд╡рд╛ рд░рдХреНрддрд╡рд╛рд╣рд┐рдиреНрдпрд╛ рдЕрдзрд┐рдХ рджреГрд╢реНрдпрдорд╛рди рдЭрд╛рд▓реНрдпрд╛ рдЕрд╕рддреАрд▓ рддрд░ рдбреЙрдХреНрдЯрд░рд╛рдВрдЪрд╛ рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛.",
    "рдХреЛрдгрддреЗ рдЙрдкрдЪрд╛рд░ рдкрд░реНрдпрд╛рдп рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗрдд?": "рдЙрдкрдЪрд╛рд░рд╛рдВрдордзреНрдпреЗ рдЬреАрд╡рдирд╢реИрд▓реАрддреАрд▓ рдмрджрд▓рд╛рдВрдкрд╛рд╕реВрди рддреЗ рд╡реИрджреНрдпрдХреАрдп рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдЬрд╕реЗ рдХреА рд╕реНрдХреНрд▓реЗрд░реЛрдереЗрд░рдкреА, рд▓реЗрдЭрд░ рдереЗрд░рдкреА рдЖрдгрд┐ рд╢рд╕реНрддреНрд░рдХреНрд░рд┐рдпрд╛ рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдЖрд╣реЗрдд."
  }
};

export default function MultilingualAssistant() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "Hello! I'm your multilingual medical assistant. I can help you with questions about varicose veins in multiple languages. How can I assist you today?",
      sender: "assistant",
      timestamp: new Date(),
      language: "en"
    }
  ]);
  const [inputText, setInputText] = useState("");
  const [selectedLanguage, setSelectedLanguage] = useState("en");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (text?: string) => {
    const messageText = text || inputText.trim();
    if (!messageText) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      sender: "user",
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText("");
    setIsTyping(true);

    try {
      // Call real API
      const response = await fetch('http://localhost:8000/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: messageText,
          language: selectedLanguage,
          session_id: `user_${Date.now()}_${Math.random()}`
        })
      });

      if (response.ok) {
        const data = await response.json();
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: data.response,
          sender: "assistant",
          timestamp: new Date(),
          language: selectedLanguage
        };
        setMessages(prev => [...prev, assistantMessage]);
      } else {
        throw new Error('API request failed');
      }
    } catch (error) {
      console.error('Error calling chat API:', error);
      // Fallback to local response
      const response = getResponse(messageText, selectedLanguage);
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        sender: "assistant",
        timestamp: new Date(),
        language: selectedLanguage
      };
      setMessages(prev => [...prev, assistantMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const getResponse = (question: string, language: string) => {
    const langResponses = responses[language as keyof typeof responses] || responses.en;
    
    // Check for exact match first
    if (langResponses[question as keyof typeof langResponses]) {
      return langResponses[question as keyof typeof langResponses];
    }

    // Generic responses based on language
    const genericResponses = {
      en: "Thank you for your question. Based on your query, I recommend consulting with a healthcare professional for personalized advice. In the meantime, maintaining a healthy lifestyle with regular exercise and proper leg elevation can be beneficial for vascular health.",
      hi: "рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХреА рдЬрд╛рдВрдЪ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдореИрдВ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдиреЗ рдХреА рд╕рд▓рд╛рд╣ рджреЗрддрд╛ рд╣реВрдВред рдЗрд╕ рдмреАрдЪ, рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо рдФрд░ рдЙрдЪрд┐рдд рдкреИрд░ рдХреА рдКрдВрдЪрд╛рдИ рдХреЗ рд╕рд╛рде рд╕реНрд╡рд╕реНрде рдЬреАрд╡рдирд╢реИрд▓реА рдмрдирд╛рдП рд░рдЦрдирд╛ рд╕рдВрд╡рд╣рдиреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рд▓рд┐рдП рдлрд╛рдпрджреЗрдордВрдж рд╣реЛ рд╕рдХрддрд╛ рд╣реИред",
      mr: "рддреБрдордЪреНрдпрд╛ рдкреНрд░рд╢реНрдирд╛рдмрджреНрджрд▓ рдзрдиреНрдпрд╡рд╛рджред рддреБрдордЪреНрдпрд╛ рдЪреМрдХрд╢реАрдЪреНрдпрд╛ рдЖрдзрд╛рд░рд╛рд╡рд░, рдореА рд╡реИрдпрдХреНрддрд┐рдХ рд╕рд▓реНрд▓реНрдпрд╛рд╕рд╛рдареА рдЖрд░реЛрдЧреНрдп рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХрд╛рдВрд╢реА рд╕рд▓реНрд▓рд╛рдорд╕рд▓рдд рдХрд░рдгреНрдпрд╛рдЪреА рд╢рд┐рдлрд╛рд░рд╕ рдХрд░рддреЛред рджрд░рдореНрдпрд╛рди, рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо рдЖрдгрд┐ рдпреЛрдЧреНрдп рдкрд╛рдп рдЙрдВрдЪрд╛рд╡рдгреЗ рдпрд╛рд╕рд╣ рдирд┐рд░реЛрдЧреА рдЬреАрд╡рдирд╢реИрд▓реА рд░рд╛рдЦрдгреЗ рд╕рдВрд╡рд╣рдиреА рдЖрд░реЛрдЧреНрдпрд╛рд╕рд╛рдареА рдлрд╛рдпрджреЗрд╢реАрд░ рдЕрд╕реВ рд╢рдХрддреЗ."
    };

    return genericResponses[language as keyof typeof genericResponses] || genericResponses.en;
  };

  const handleLanguageChange = (langCode: string) => {
    setSelectedLanguage(langCode);
    
    // Add language change message
    const changeMessage: Message = {
      id: Date.now().toString(),
      text: `Language changed to ${languages.find(l => l.code === langCode)?.name}. How can I help you?`,
      sender: "assistant",
      timestamp: new Date(),
      language: langCode
    };

    setMessages(prev => [...prev, changeMessage]);
  };

  const handleQuickQuestion = (question: string) => {
    handleSendMessage(question);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-medical-light via-white to-vascular-light p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8 pt-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 bg-vascular-secondary rounded-full">
              <MessageCircle className="w-6 h-6 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-medical-dark font-medical">
              Multilingual AI Assistant
            </h1>
          </div>
          <p className="text-medical-dark/70 text-lg max-w-3xl mx-auto">
            Get medical guidance in your preferred language with our AI-powered multilingual assistant
          </p>
        </div>

        <div className="grid lg:grid-cols-4 gap-6">
          {/* Language Selection & Quick Actions */}
          <div className="space-y-6">
            {/* Language Selector */}
            <div className="bg-white shadow-medical-lg rounded-2xl p-6 border border-gray-100">
              <h3 className="text-lg font-semibold text-medical-dark mb-4 flex items-center gap-2">
                <Languages className="w-5 h-5 text-vascular-secondary" />
                Select Language
              </h3>
              
              <div className="space-y-2">
                {languages.map(language => (
                  <button
                    key={language.code}
                    onClick={() => handleLanguageChange(language.code)}
                    className={`w-full p-3 rounded-xl text-left transition-all duration-200 flex items-center gap-3 ${
                      selectedLanguage === language.code
                        ? 'bg-medical-primary text-white'
                        : 'bg-gray-50 hover:bg-gray-100 text-medical-dark'
                    }`}
                  >
                    <span className="text-lg">{language.flag}</span>
                    <span className="font-medium">{language.name}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Quick Questions */}
            <div className="bg-white shadow-medical-lg rounded-2xl p-6 border border-gray-100">
              <h3 className="text-lg font-semibold text-medical-dark mb-4 flex items-center gap-2">
                <HelpCircle className="w-5 h-5 text-medical-accent" />
                Quick Questions
              </h3>
              
              <div className="space-y-2">
                {(quickQuestions[selectedLanguage as keyof typeof quickQuestions] || quickQuestions.en).map((question, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickQuestion(question)}
                    className="w-full p-3 text-left rounded-xl bg-gray-50 hover:bg-medical-light transition-colors duration-200 text-sm text-medical-dark"
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>

            {/* Medical Features */}
            <div className="bg-white shadow-medical-lg rounded-2xl p-6 border border-gray-100">
              <h3 className="text-lg font-semibold text-medical-dark mb-4 flex items-center gap-2">
                <Stethoscope className="w-5 h-5 text-medical-success" />
                Features
              </h3>
              
              <div className="space-y-3">
                <div className="flex items-center gap-3 p-2 rounded-lg">
                  <Heart className="w-4 h-4 text-red-500" />
                  <span className="text-sm text-medical-dark">Medical Advice</span>
                </div>
                <div className="flex items-center gap-3 p-2 rounded-lg">
                  <Globe className="w-4 h-4 text-blue-500" />
                  <span className="text-sm text-medical-dark">6 Languages</span>
                </div>
                <div className="flex items-center gap-3 p-2 rounded-lg">
                  <Clock className="w-4 h-4 text-green-500" />
                  <span className="text-sm text-medical-dark">24/7 Availability</span>
                </div>
              </div>
            </div>
          </div>

          {/* Chat Interface */}
          <div className="lg:col-span-3">
            <div className="bg-white shadow-medical-lg rounded-2xl border border-gray-100 flex flex-col h-[600px]">
              {/* Chat Header */}
              <div className="p-6 border-b border-gray-100">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-vascular-secondary rounded-full">
                    <Bot className="w-5 h-5 text-white" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-medical-dark">Medical AI Assistant</h3>
                    <p className="text-sm text-gray-500">
                      Currently speaking: {languages.find(l => l.code === selectedLanguage)?.name}
                    </p>
                  </div>
                </div>
              </div>

              {/* Messages Area */}
              <div className="flex-1 overflow-y-auto p-6 space-y-4">
                {messages.map(message => (
                  <div
                    key={message.id}
                    className={`flex gap-3 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    {message.sender === 'assistant' && (
                      <div className="p-2 bg-medical-primary rounded-full flex-shrink-0">
                        <Bot className="w-4 h-4 text-white" />
                      </div>
                    )}
                    
                    <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                      message.sender === 'user'
                        ? 'bg-medical-primary text-white'
                        : 'bg-gray-100 text-medical-dark'
                    }`}>
                      <p className="text-sm leading-relaxed">{message.text}</p>
                      <p className="text-xs mt-2 opacity-70">
                        {message.timestamp.toLocaleTimeString()}
                      </p>
                    </div>

                    {message.sender === 'user' && (
                      <div className="p-2 bg-gray-300 rounded-full flex-shrink-0">
                        <User className="w-4 h-4 text-white" />
                      </div>
                    )}
                  </div>
                ))}

                {isTyping && (
                  <div className="flex gap-3">
                    <div className="p-2 bg-medical-primary rounded-full flex-shrink-0">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                    <div className="bg-gray-100 px-4 py-3 rounded-2xl">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                      </div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>

              {/* Input Area */}
              <div className="p-6 border-t border-gray-100">
                <div className="flex items-center gap-2">
                  <div className="flex-1 relative">
                    <input
                      type="text"
                      value={inputText}
                      onChange={(e) => setInputText(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                      placeholder={`Type your question in ${languages.find(l => l.code === selectedLanguage)?.name}...`}
                      className="w-full px-4 py-3 pr-12 border border-gray-200 rounded-xl focus:ring-2 focus:ring-medical-primary focus:border-medical-primary transition-colors duration-200"
                    />
                    <button className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-medical-primary transition-colors duration-200">
                      <Mic className="w-5 h-5" />
                    </button>
                  </div>
                  
                  <button
                    onClick={() => handleSendMessage()}
                    disabled={!inputText.trim() || isTyping}
                    className="p-3 bg-medical-primary text-white rounded-xl hover:bg-medical-secondary disabled:bg-gray-300 disabled:cursor-not-allowed transition-all duration-200"
                  >
                    <Send className="w-5 h-5" />
                  </button>
                </div>

                <div className="flex items-center justify-between mt-4">
                  <div className="flex items-center gap-2 text-xs text-gray-500">
                    <Volume2 className="w-4 h-4" />
                    <span>Voice responses available</span>
                  </div>
                  
                  <div className="text-xs text-gray-500">
                    Powered by medical AI
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
